{"version":3,"sources":["screens/HomeScreen.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","base","position","left","top","transform","display","flexWrap","alignItems","justifyContent","form","padding","spacing","flexDirection","formControl","margin","minWidth","name","paper","paddingTop","paddingBottom","color","palette","primary","main","message","marginTop","marginLeft","marginRight","maxWidth","messageSuccess","backgroundColor","messageError","messageText","wrapper","buttonProgress","HomeScreen","classes","useState","username","setUsername","signInType","setSignInType","loading","setLoading","success","setMessage","getQueryParams","params","url","href","queryString","RegExp","exec","className","Paper","variant","Typography","elevation","noValidate","autoComplete","TextField","id","label","onChange","event","value","target","FormControl","InputLabel","Select","labelId","MenuItem","Button","disableElevation","onClick","search","window","location","foo","data","type","t","fetch","method","headers","body","JSON","stringify","then","response","json","result","error","onSubmitClicked","disabled","CircularProgress","size","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.a54bc3b4.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Promise from 'promise-polyfill';\nimport 'whatwg-fetch'\n\n\nconst useStyles = makeStyles((theme) => ({\n  base: {\n    position: 'absolute', \n    left: '50%', \n    top: '50%',\n    transform: 'translate(-50%, -50%)',\n    display: \"flex\",  \n    flexWrap: \"wrap\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  form: {\n    padding: theme.spacing(2),\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexDirection:\"column\"\n  },\n  formControl: {\n    margin: theme.spacing(2),\n    minWidth: 300,\n  },\n  name: {\n    minWidth: 300\n  },\n  paper: {\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexDirection:\"column\",\n    color: theme.palette.primary.main,\n  },\n  message: {\n    marginTop: theme.spacing(2),\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    minWidth: 300,\n    maxWidth: 300,\n    display: \"flex\",\n    flexDirection:\"column\",\n  },\n  messageSuccess: {\n    color: theme.palette.primary.main,\n    backgroundColor: \"#c2cff1\",\n  },\n  messageError: {\n    color: \"#dd2114\",\n    backgroundColor: \"#fbd1ce\",\n  },\n  messageText: {\n    padding: theme.spacing(2)\n  }, \n  wrapper: {\n    margin: theme.spacing(1),\n    position: 'relative',\n  },\n  buttonProgress: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    marginTop: -12,\n    marginLeft: -12,\n  },\n}));\n\nexport default function HomeScreen() {\n\n  const classes = useStyles();\n  const [username, setUsername] = useState(\"\");\n  const [signInType, setSignInType] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState({success: true, message: \"\"});\n\n\n  const onSubmitClicked = event => {\n\n    const search = window.location.search;\n    const foo = getQueryParams(\"query\", search);\n\n    if (foo == null ||foo == \"\" ) {\n      setMessage({success:false, message: \"Something went wrong. Please try again!\"})\n      return\n    }\n\n    setLoading(true);\n    const data = { name: username, type: signInType };\n    const t= `${foo}`\n    fetch(t, {\n      method: 'POST', // *GET, POST, PUT, DELETE, etc.\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n    })\n    .then(response => response.json())\n    .then(\n      (result) => {\n        setLoading(false);\n        setMessage({success:true, message: \"Successfully recorded.\"})\n      },\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => {\n        setLoading(false);\n        setMessage({success:false, message: \"Something went wrong. Please try again!\"})\n      }\n    )\n  }\n\n  const onUsernameChanged = event => {\n    const { value } = event.target;\n    setUsername(value)\n  }\n\n  const onSignInTypeChanged = event => {\n    const { value } = event.target;\n    setSignInType(value)\n  }\n\n  const getQueryParams = ( params, url ) => {\n  \n    let href = url;\n    //this expression is to get the query strings\n    let reg = new RegExp( '[?&]' + params + '=([^&#]*)', 'i' );\n    let queryString = reg.exec(href);\n    return queryString ? queryString[1] : null;\n  };\n\n  return (\n    <div className= {classes.base}>\n      <Paper variant=\"outlined\" className={`${classes.paper}`}>\n        <Typography variant=\"h6\">\n          Welcome!\n        </Typography>\n\n        {(message.message != \"\" && message.message != null) &&\n          <Paper elevation={0} className={`${classes.message} ${message.success ? classes.messageSuccess: classes.messageError}`}>\n            <Typography variant=\"body1\" className={classes.messageText}>\n              {message.message}\n            </Typography>\n          </Paper>\n        }\n        \n        <form className={classes.form} noValidate autoComplete=\"off\">\n          <TextField id=\"name\" label=\"Name\" variant=\"outlined\"  className={classes.name} onChange={onUsernameChanged}/>\n          <FormControl variant=\"outlined\" className={classes.formControl}>\n            <InputLabel id=\"type-input-label\">Sign In Type</InputLabel>\n            <Select\n              labelId=\"type-selector\"\n              id=\"type-selector\"\n              value={signInType}\n              onChange={onSignInTypeChanged}\n              label=\"Sign In Type\">\n              <MenuItem value={\"SIGN_IN\"}>Sign In</MenuItem>\n              <MenuItem value={\"SIGN_OUT\"}>Sign Out</MenuItem>\n            </Select>\n          </FormControl>\n          <div className={classes.wrapper}>\n            <Button variant=\"contained\" color=\"primary\" disableElevation onClick={(event) => onSubmitClicked(event)} disabled={username == null || username== \"\" || signInType == null || signInType== \"\" || loading }>\n              Submit\n            </Button>\n            {loading && <CircularProgress size={24} className={classes.buttonProgress} />}\n          </div>  \n        </form>\n      </Paper>\n    </div>\n  );\n}","import React from 'react';\nimport './App.css';\nimport HomeScreen from './screens/HomeScreen';\n\n\nfunction App() {\n  return (\n    <HomeScreen/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}